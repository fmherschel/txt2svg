#!/usr/bin/perl
#
# txt2svg
#
# Description:  Converts command-line output or text files to svg graphics.
#               Hopefully helps to improve adoc documents when longer command-line-output
#               needs to be scaled to match on pdf pages or better match in html pages.
#
##############################################################################
#
# SAPHana
# Author:       Fabian Herschel, Oktober 2021
# Support:      linux@sap.com
# License:      GNU General Public License (GPL)
# Copyright:    (c) 2021 SUSE LLC
#
#<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
#<!-- 
#  Zeile 01: y="24"
#  Zeile 02: y="40" (+16)
#  Zeile 10: y="168"  (ZeileNo*16+8)
#
#  Col 001: 13.5         (=1*9+4.5)
#  Col 010: 94.5  (+81)  (=10*9+4.5)
#  Col 120: 1084.5       (=120*9+4.5) Korrektur nÃ¶tig!!  besser 9.1 als Faktor!!
#  -->
#<svg width="1116px" height="304px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
#  <g id="text" stroke="none" style="font-family:monospace;font-size:15.2px" >
#    <text id="obj0b" x="095.5" y="24" fill="#000">|</text> <text id="obj0b" x="104.6" y="24" fill="#000">10</text>
#    <text id="obj10" x="1005.5" y="24" fill="#000">|</text>
#  </g>
#</svg>

use strict;
use Getopt::Long;

my $xFactor = 9.1; 
my $xZero   = 4.5;

my $yFactor = 16;
my $yZero = 8;

my $maxLines = 24;

my $maxLines = 24;
my $maxCol = 120;

my $xMax = $maxCol * $xFactor + 2 * $xZero;
my $yMax = $maxLines * $yFactor + 2 * $yZero;

my $help=0;

sub init
{
    my $result = GetOptions ("lines=s" => \$maxLines,
                           "cols=s" => \$maxCol,
                           "help" => \$help,
         );
    $xMax = $maxCol * $xFactor + 2 * $xZero;
    $yMax = $maxLines * $yFactor + 2 * $yZero;
    return 0;
}

sub write_header
{
    printf('<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'); printf("\n");
    printf('<!-- created by txt2svg (c) 2021 SUSE Ltd, Author: Fabian Herschel -->'); printf("\n");
}

sub write_line
{
    my ( $lineNo, $lineText ) = @_;

    my @char = split(//,$lineText); # slpit line into single chars

    for (my $columnCounter = 0; $columnCounter < @char; $columnCounter++) {
        my $putChar = $char[$columnCounter];
        printf('<text id="%s" x="%s" y="%s" fill="%s">%s</text>',"o" . $lineNo . "-" . $columnCounter,$columnCounter*$xFactor+$xZero ,$lineNo*$yFactor+$yZero,'#000',$putChar);

    }
    printf("\n");

}

sub write_text
{
    my $lineCounter=1; my $line;
    while(<>) {
        chomp;
        $line = $_;
        write_line($lineCounter, $line);
        $lineCounter++;
    }
}

sub write_body
{
    printf('<svg width="%spx" height="%spx" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">',$xMax, $yMax); printf("\n");
    printf('<g id="text" stroke="none" style="font-family:monospace;font-size:15.2px">'); printf("\n");
    write_text();
    printf("</g>\n");
    printf("</svg>\n");
}

sub write_trailer
{
}

init();
write_header();
write_body();
write_trailer();
